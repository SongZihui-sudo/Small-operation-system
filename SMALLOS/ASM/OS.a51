$NOMOD51
$INCLUDE(reg52.h)
;程序执行的起始地址	
ORG 	0000H				
    LJMP 	Main			
ORG 	0023H
;    LJMP UART_INTER
ORG     0030H

Main:
    MOV SP,#60H
    ;初始化串口参数
    ;ACALL UAER_INIT
    ;LCALL OLED_INIT
    ;LCALL OLED_SHOW_put_char_8x16
    ;LCALL OLED_CHAR_SHOW
     LCALL LED_INIT
;/************************串口交互界面·***************************************/
/**
UAER_INIT:
    SETB EA				
	SETB ES 
    MOV TMOD,#021H;9600bps
    MOV TH1,#0FDH		
	MOV TL1,#0FDH 
	MOV SCON,#50H		
	MOV PCON,#00H
    SETB TR1 
    RET
PRINT_TIP: 
    ;DPTR指向数组
    MOV DPTR,#UART_TIP  	
	MOV R0,#00H	
    CALL PRINTF
    MOV DPTR,#STR_Tab  	 ;解决多次重复输出的BUG
	MOV R0,#00H	
    CALL PRINTF
    CALL PRINT_TIP2
PRINT_TIP2:
    MOV DPTR,#STR0_TAB
    MOV R0,#00H
    CALL PRINTF
    CALL STOP 
;延时	
DEALAY:						
    MOV R7,#250 
    D1: MOV R6,#250    
    D2: DJNZ R6,D2     
    DJNZ R7,D1  
    RET
;输出字符函数   
PRINTF: 
    MOV	 A,R0			;下标赋值
	MOVC A, @A+DPTR		;读取数组数据
    CLR  ES
    CLR  TI
    MOV SBUF,A
    CALL DEALAY
    INC	R0				;下标自加
    CJNE R0,#0AH,Next	;判断是否为30，否则进去STOP，防止循环重复输出
    MOV R0,#30H
    RET
Next:		
	SJMP PRINTF
;停止重复发送 
STOP:
    SETB TI
    SETB ES
    CALL UART_INTER
;判断进行换行操作   
CMP_S:          
    CJNE A, #53H,CMP_ENTER ;S键关闭串口 
    MOV DPTR,#TIMER_TIP  	
	MOV R0,#00H	
    CALL PRINTF
    CALL UART_OFF
CMP_ENTER:
	CJNE A, #0DH, RX
    CALL PRINT_TIP2
;读取键盘输入
RX:	
    MOV SBUF,A
    JNB TI,$
    CLR TI
    RET
UART_INTER:
    PUSH ACC				
    PUSH PSW
    JBC TI, L_EXIT
	CLR RI			;否则清除发送标志位
    MOV A,SBUF
    CALL CMP_S
L_EXIT:
    POP PSW
    POP ACC
    RETI

;要发送的数据
STR_Tab: 				
    DB 48H,45H,4CH,4CH,4FH,2CH,48H,49H,21H,21H;HELLO,HI!!
STR0_TAB:
    DB 0AH,0DH,53H,4DH,41H,4CH,4CH,4FH,53H,3AH;SMALLOS:
UART_TIP:
    DB 5BH,4FH,4BH,5DH,55H,41H,52H,54H,0AH,0DH;[OK]UART
TIMER_TIP:
    DB 0AH,0DH,5BH,4FH,4BH,5DH,54H,49H,4DH,45H;[OK]TIMER
OFF_UART:
    DB 0AH,0DH,5BH,58H,58H,5DH,55H,41H,52H,54H;[XX]UART
**/
;/****************************多任务*************************************/    
;初步实现了多任务，但是任务一的优先级大于任务二。
;任务二的运行频率大于任务一。
  ;关闭串口
/*
UART_OFF:
    CALL RX
    MOV DPTR,#OFF_UART  	
	MOV R0,#00H	
    CALL PRINTF
    CLR TR1
    CLR ES
    */

;打开定时器2  
TIMER2_INIT:
    ANL TMOD,#0F0H		;设置定时器模式
	MOV TL0,#091H		;设置定时初值
	MOV TH0,#0FFH		;设置定时初值
	CLR TF0			;清除TF0标志
	SETB TR0		;定时器0开始计时
    JBC TF0,COUNTER
COUNTER:
    SETB TF0
    MOV  R1,#00H
    INC  R1
    CJNE R1,#01H,TASK1
;任务一
TASK1:
    CLR P1.0     
    SETB P1.0        
    ;JBC TF0, TASK2  ;0.00218S
    ;CALL TASK1
;任务二
TASK2:
    SETB P1.2
    CLR  P1.2
    JBC TF0,TASK3
    CALL TASK2
;任务三
TASK3:
    SETB P1.1
    CLR  P1.1
    JBC TF0,TASK1
    CALL TASK3

;/****************************OLED驱动****************************/
;/****************************屏幕交互界面**********************/
/**

OLED_INIT_ON:
    SETB P1.0       ;P1.0 SDA
    ACALL DELAY10US 
    SETB P1.1      ;P1.1 SCL
    ACALL DELAY10US
    CLR P1.0
    ACALL DELAY10US
    CLR P1.1
    ACALL DELAY10US
    RET
OLED_INIT_STOP:
    CLR P1.0
    ACALL DELAY10US
    SETB P1.1
    ACALL DELAY10US
    SETB P1.0
    ACALL DELAY10US
    RET
OLED_SEND:
    INC R3
    RLC A
    MOV P1.0,C
    ACALL DELAY10US
    SETB P1.1
    ACALL DELAY10US
    CLR P1.1
    ACALL DELAY10US
    CJNE R3,#0X07,OLED_SEND

    CLR P1.1
    ACALL DELAY10US
    SETB P1.0
    ACALL DELAY10US
LOOP:
    SETB P1.1
    ACALL DELAY10US
    JNB P1.0,OLED_SEND_O
    AJMP LOOP
OLED_SEND_O:
    CLR  P1.1
    ACALL DELAY10US
    RET
OLED_WRITE:
    ACALL OLED_INIT_ON 
    MOV R3,#00H
    MOV A,#0X78
    ACALL OLED_SEND
    MOV R3,#00H
    MOV A,#0X00
    ACALL OLED_SEND
    MOV R3,#00H
    MOV A,R4
    ACALL OLED_SEND
    ACALL OLED_INIT_STOP
    RET
OELD_WRITE_DATA:
    ACALL OLED_INIT_ON
    MOV R3,#00H
    MOV A,#0X78
    ACALL OLED_SEND
    MOV R3,#00H
    MOV A,#0X40
    ACALL OLED_SEND
    MOV R3,#00H
    MOV A,R5
    ACALL OLED_SEND
    ACALL OLED_INIT_STOP
    RET
OLED_CLEAR:
    MOV R4,#0X20
    ACALL OLED_WRITE
    MOV R4,0X02
    ACALL OLED_WRITE
LOOP_CLEAR:
    INC R3
    ADD A,R3
    ADD A,#0XB0
    MOV R4,A
    ACALL OLED_WRITE
    MOV R4,#0X00
    ACALL OLED_WRITE
    MOV R4,#0X10
    ACALL OLED_WRITE
LOOP_CLEAR_2:
    INC R2
    MOV R5,#0X00
    ACALL OELD_WRITE_DATA
    CJNE R2,#0X80,LOOP_CLEAR_2
    MOV R2,#30H
    CJNE R3,#0X08,LOOP_CLEAR
    RET
DELAY500US:			;@11.0592MHz
	NOP
	PUSH 30H
	PUSH 31H
	MOV 30H,#5
	MOV 31H,#72
NEXT_500:
	DJNZ 31H,NEXT_500
	DJNZ 30H,NEXT_500
	POP 31H
	POP 30H
	RET
OLED_INIT:
    ACALL DELAY500US
    MOV R4,#0XAE
    ACALL OLED_WRITE
    MOV R4,#0X00
    ACALL OLED_WRITE
    MOV R4,#0X10
    ACALL OLED_WRITE
    MOV R4,#0X40
    ACALL OLED_WRITE
    MOV R4,#0X81
    ACALL OLED_WRITE
    MOV R4,#0XFF
    ACALL OLED_WRITE
    MOV R4,#0XA1
    ACALL OLED_WRITE
    MOV R4,#0XC8
    ACALL OLED_WRITE
    MOV R4,#0XA6
    ACALL OLED_WRITE
    MOV R4,#0XA8
    ACALL OLED_WRITE
    MOV R4,#0X3F
    ACALL OLED_WRITE
    MOV R4,#0XD3
    ACALL OLED_WRITE
    MOV R4,#0X00
    ACALL OLED_WRITE
    MOV R4,#0XD5
    ACALL OLED_WRITE
    MOV R4,#0X80
    ACALL OLED_WRITE
    MOV R4,#0XD9
    ACALL OLED_WRITE
    MOV R4,#0XF1
    ACALL OLED_WRITE
    MOV R4,#0XDA
    ACALL OLED_WRITE
    MOV R4,#0X12
    ACALL OLED_WRITE
    MOV R4,#0XDB
    ACALL OLED_WRITE
    MOV R4,#0X40
    ACALL OLED_WRITE
    MOV R4,#0X20
    ACALL OLED_WRITE
    MOV R4,#0X02
    ACALL OLED_WRITE
    MOV R4,#0X8D
    ACALL OLED_WRITE
    MOV R4,#0X14
    ACALL OLED_WRITE
    MOV R4,#0XA4
    ACALL OLED_WRITE
    MOV R4,#0XA6
    ACALL OLED_WRITE
    MOV R4,0XAF
    ACALL OLED_WRITE
    ACALL DELAY500US
    ACALL OLED_CLEAR
    RET
OLED_SHOW_put_char_8x16:
    MOV R4,#0X20
    ACALL OLED_WRITE
    MOV R4,#0X00
    ACALL OLED_WRITE
    MOV R4,#0X22
    ACALL OLED_WRITE
    MOV R4,#0X00
    ACALL OLED_WRITE
    MOV R4,#0X01
    ACALL OLED_WRITE
    MOV R4,#0X21
    ACALL OLED_WRITE
    MOV R4,#0X00
    ACALL OLED_WRITE
    MOV R4,#0X07
    ACALL OLED_WRITE
    RET
OLED_CHAR_SHOW:
    MOV DPTR,#STR_OLED01
    ACALL PRINTF_OLED
    MOV DPTR,#STR_0LED02
    ACALL PRINTF_OLED
    
    MOV DPTR,#STR_0LED03
    ACALL PRINTF_OLED

    MOV DPTR,#STR_0LED03
    ACALL PRINTF_OLED

    MOV DPTR,#STR_0LED04
    ACALL PRINTF_OLED
    RET
PRINTF_OLED: 
    MOV	 A,R0			;下标赋值
	MOVC A, @A+DPTR		;读取数组数据
    MOV R5,A
    ACALL OELD_WRITE_DATA
    INC	R0				;下标自加
    CJNE R0,#10H,Next_OLED	;判断是否为30，否则进去STOP，防止循环重复输出
    MOV R0,#30H 
    RET
Next_OLED:		
	SJMP PRINTF_OLED
STR_OLED01:
    DB 000H ,0F0H ,080H ,080H ,000H ,00FH ,000H ,000H
STR_0LED02:
    DB 000H ,0F0H, 090H, 090H, 000H, 00FH, 008H, 008H 
STR_0LED03:
    DB 000H ,0F0H ,000H ,000H ,000H ,00FH ,008H ,008H
STR_0LED04:
    DB 0C0H ,030H ,010H ,010H ,003H ,00CH ,008H ,008H
/*
DB 00H F0H 80H 80H 00H 0FH 00H 00H;"H",0

DB 00H F0H 90H 90H 00H 0FH 08H 08H;"E",1

DB 00H F0H 00H 00H 00H 0FH 08H 08H;"L",2

DB 00H F0H 00H 00H 00H 0FH 08H 08H;"L",3

DB C0H 30H 10H 10H 03H 0CH 08H 08H;"O",4
*/

;/**********************LED点阵屏幕交互************************************/
DELAY10US:			;@11.0592MHz
	PUSH 30H
	MOV 30H,#19
NEXT_D:
	DJNZ 30H,NEXT_D
	POP 30H
	RET
LED_INIT:
    AHC595_SEND:
        SCLK BIT P1.0
        RCRK BIT P1.1
        SER  BIT P1.2
        CLR SCLK
        CLR RCRK
        MOV P0,#0XFF
        MOV P2,#0XFF
    LOOP_SEND:
        INC R2
        RLC A
        MOV SER,C
         SETB SCLK
        ACALL DELAY10US
        CLR SCLK
        CJNE R2,#0X08,LOOP_SEND
        SETB RCRK
        ACALL DELAY10US
        CLR RCRK
    RET
LED_WRITE:
    MOV DPTR,#STR_LED01
    ACALL LED_PRINTF
LED_PRINTF:
    MOV	 A,R0			;下标赋值
	MOVC A, @A+DPTR		;读取数组数据
    ACALL LED_INIT
    INC	R0				;下标自加
    CJNE R0,#10H,Next_LED	;判断是否为30，否则进去STOP，防止循环重复输出
    MOV R0,#30H 
    RET
Next_LED:		
	SJMP LED_PRINTF
STR_LED01:
    DB 000H ,0F0H ,080H ,080H ,000H ,00FH ,000H ,000H
STR_LED02:
    DB 000H ,0F0H, 090H, 090H, 000H, 00FH, 008H, 008H 
STR_LED03:
    DB 000H ,0F0H ,000H ,000H ,000H ,00FH ,008H ,008H
STR_LED04:
    DB 0C0H ,030H ,010H ,010H ,003H ,00CH ,008H ,008H
END     
